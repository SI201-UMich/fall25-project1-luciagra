# Author: Lucia Grasso
# UMID: 24150074
# Course: SI 201 - Project 1
# Dataset: SampleSuperstore.csv
# AI Tools Used: ChatGPT (for code structure and documentation help)

import csv
from statistics import mean

def read_csv_to_dict(filename):

# read a CSV file and return a list of dictionaries
# each dictionary represents one row in the dataset
    
    data = []
    with open(filename, encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            # Convert numeric columns to proper data types
            row["Sales"] = float(row["Sales"])
            row["Profit"] = float(row["Profit"])
            row["Quantity"] = int(row["Quantity"])
            data.append(row)
    return data

# calculation functions

def average_profit_by_region(data):

# Calculates the average profit for each region.
# Uses: Region, Profit
# Returns a dictionary mapping Region -> Average Profit

    region_profits = {}
    for row in data:
        region = row["Region"]
        profit = row["Profit"]
        region_profits.setdefault(region, []).append(profit)
    return {region: round(mean(profits), 2) for region, profits in region_profits.items()}


def top_subcategory_by_average_sales(data):

# Calculates the average sales for each sub-category and finds the top sub-category.
# Uses: Sub-Category, Sales, Category
# Returns a tuple: (subcategory_name, average_sales_value)

    sub_sales = {}
    for row in data:
        subcat = row["Sub-Category"]
        sale = row["Sales"]
        sub_sales.setdefault(subcat, []).append(sale)

    avg_sales = {subcat: mean(values) for subcat, values in sub_sales.items()}
    top_subcat = max(avg_sales, key=avg_sales.get)
    return top_subcat, round(avg_sales[top_subcat], 2)

# output results

def write_results_to_file(avg_profit_dict, top_subcat_tuple, filename="results.txt"):

# writes the calculated results to a plain text file

    with open(filename, "w", encoding="utf-8") as f:
        f.write("=== SampleSuperstore Data Analysis ===\n\n")
        f.write("Average Profit by Region:\n")
        for region, profit in avg_profit_dict.items():
            f.write(f" - {region}: ${profit}\n")

        f.write("\nTop Sub-Category by Average Sales:\n")
        f.write(f" - {top_subcat_tuple[0]} (${top_subcat_tuple[1]})\n")
    print(f"Results written to {filename}")




# test functions

def test_average_profit_by_region():
    # general case
    test_data = [
        {"Region": "East", "Profit": 100},
        {"Region": "East", "Profit": 200},
        {"Region": "West", "Profit": 50}
    ]
    result = average_profit_by_region(test_data)
    assert result["East"] == 150
    assert result["West"] == 50

    # edge case: one region only
    result = average_profit_by_region([{"Region": "South", "Profit": 0}])
    assert result["South"] == 0

def test_top_subcategory_by_average_sales():
    # general case
    test_data = [
        {"Sub-Category": "Phones", "Sales": 500, "Category": "Technology"},
        {"Sub-Category": "Chairs", "Sales": 300, "Category": "Furniture"},
        {"Sub-Category": "Phones", "Sales": 700, "Category": "Technology"}
    ]
    top = top_subcategory_by_average_sales(test_data)
    assert top[0] == "Phones"
    assert round(top[1], 2) == 600.00

    # edge case: tie in averages
    tie_data = [
        {"Sub-Category": "Tables", "Sales": 100, "Category": "Furniture"},
        {"Sub-Category": "Lamps", "Sales": 100, "Category": "Furniture"}
    ]
    top_tie = top_subcategory_by_average_sales(tie_data)
    assert top_tie[1] == 100.00



# main program

def main():
    data = read_csv_to_dict("/Users/luciagrasso/Desktop/SI201/fall25-project1-luciagra/SampleSuperstore.csv")
    avg_profit = average_profit_by_region(data)
    top_subcat = top_subcategory_by_average_sales(data)
    write_results_to_file(avg_profit, top_subcat)

if __name__ == "__main__":
    # run tests
    test_average_profit_by_region()
    test_top_subcategory_by_average_sales()

    # run main program
    main()
